openapi: 3.0.1
info:
  title: Enum Talent Authentication API
  description: Backend API for Authentication and Talent Profile setup on Enum
  version: '1.0'
servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: Authentication endpoints
  - name: Talent Profile
    description: Talent profile management endpoints

paths:
  /well-known/health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the service is running
      operationId: health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /v1/auth/signup:
    post:
      tags:
        - Authentication
      summary: Sign up
      description: Create a new user account
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email
      description: Verify user email with token
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid, expired, or used token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/auth/login:
    post:
      tags:
        - Authentication
      summary: Login
      description: Login with email and password
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Email not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      description: Logout current session
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout successful
        '401':
          description: Unauthorized

  /v1/profile/talent:
    post:
      tags:
        - Talent Profile
      summary: Create/Update talent profile
      description: Create or update talent profile
      operationId: upsertProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TalentProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TalentProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v1/profile/me:
    get:
      tags:
        - Talent Profile
      summary: Get my profile
      description: Get current user's profile
      operationId: getProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TalentProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: ok

    SignupRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          minLength: 8
          example: password123

    VerifyEmailRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: abc123verificationtoken

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          example: password123

    TalentProfileRequest:
      type: object
      properties:
        transcript:
          type: string
          example: I graduated with honors from XYZ University
        statementOfPurpose:
          type: string
          example: I am passionate about software engineering

    AuthResponse:
      type: object
      properties:
        message:
          type: string
          example: Login successful
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        status:
          type: string
          example: verified

    TalentProfileResponse:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        transcript:
          type: string
          example: My transcript
        statementOfPurpose:
          type: string
          example: My statement
        completeness:
          type: integer
          example: 100
        missingFields:
          type: array
          items:
            type: string
          example: []

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: INVALID_CREDENTIALS
            message:
              type: string
              example: Invalid email or password
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  rule:
                    type: string
                  format:
                    type: string
            traceId:
              type: string
              example: req_a1b2c3d4